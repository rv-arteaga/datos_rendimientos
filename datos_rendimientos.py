# -*- coding: utf-8 -*-
"""datos_rendimientos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c0PTfPkl3lP_RTpuLTz7uKshcIiWqDJB
"""

import pandas as pd
import numpy as np
from scipy.optimize import minimize
import matplotlib.pyplot as plt

# Cargar el archivo CSV
file_path = "datos_rendimientos.csv"
df = pd.read_csv(file_path)

# Obtener las columnas relevantes
x = df['Rendimiento_real'].values
y_noisy = df['Rendimiento_Noisy'].values

# Definir la función objetivo para mínimos cuadrados con restricción
def objective(params, x, y):
    a, b = params
    y_pred = a * x + b
    error = np.sum((y_pred - y) ** 2)

    # Restricción: a >= 0
    if a < 0:
        error += (a ** 2) * 1e6  # Penalización alta si a es negativo

    return error

# Estimación de parámetros utilizando mínimos cuadrados con restricción
initial_guess = [1, 0]  # Valores iniciales para a y b
result = minimize(objective, initial_guess, args=(x, y_noisy), method='L-BFGS-B')

# Obtener los parámetros estimados
a_estimado, b_estimado = result.x

# Calcular los valores ajustados
y_ajustado = a_estimado * x + b_estimado

# Comparar los valores ajustados con los valores reales
plt.scatter(x, y_noisy, label='Rendimiento-noisy')
plt.plot(x, y_ajustado, color='red', label='Ajuste por mínimos cuadrados')
plt.xlabel('x')
plt.ylabel('Rendimiento')
plt.legend()
plt.show()

# Imprimir los parámetros estimados
print(f'Parámetros estimados: a = {a_estimado}, b = {b_estimado}')